a <- rnorm(100,7,30)
b <- rnorm(100,5,5)
v_test <- var.test(a,b)
if(v_test$p.value<=alph){
test <- t.test(a,b,alternative = "two.sided",var.equal = FALSE)
if(test$p.value>=alph){
print("a==b")
}else{
print("a!=b")
}
}
norm+geom_vline(xintercept = test$statistic,linetype="dashed")
a <- rnorm(100,7,30)
b <- rnorm(100,5,5)
v_test <- var.test(a,b)
if(v_test$p.value<=alph){
test <- t.test(a,b,alternative = "two.sided",var.equal = FALSE)
if(test$p.value>=alph){
print("a==b")
}else{
print("a!=b")
}
}
norm+geom_vline(xintercept = test$statistic,linetype="dashed")
a <- rnorm(100,7,30)
b <- rnorm(100,5,5)
v_test <- var.test(a,b)
if(v_test$p.value<=alph){
test <- t.test(a,b,alternative = "two.sided",var.equal = FALSE)
if(test$p.value>=alph){
print("a==b")
}else{
print("a!=b")
}
}
norm+geom_vline(xintercept = test$statistic,linetype="dashed")
a <- rnorm(100,7,30)
b <- rnorm(100,5,5)
v_test <- var.test(a,b)
if(v_test$p.value<=alph){
test <- t.test(a,b,alternative = "two.sided",var.equal = FALSE)
if(test$p.value>=alph){
print("a==b")
}else{
print("a!=b")
}
}
norm+geom_vline(xintercept = test$statistic,linetype="dashed")
a <- rnorm(100,7,30)
b <- rnorm(100,5,5)
v_test <- var.test(a,b)
if(v_test$p.value<=alph){
test <- t.test(a,b,alternative = "two.sided",var.equal = FALSE)
if(test$p.value>=alph){
print("a==b")
}else{
print("a!=b")
}
}
norm+geom_vline(xintercept = test$statistic,linetype="dashed")
a <- rnorm(100,7,30)
b <- rnorm(100,5,5)
v_test <- var.test(a,b)
if(v_test$p.value<=alph){
test <- t.test(a,b,alternative = "two.sided",var.equal = FALSE)
if(test$p.value>=alph){
print("a==b")
}else{
print("a!=b")
}
}
norm+geom_vline(xintercept = test$statistic,linetype="dashed")
a <- rnorm(100,7,30)
b <- rnorm(100,5,5)
v_test <- var.test(a,b)
if(v_test$p.value<=alph){
test <- t.test(a,b,alternative = "two.sided",var.equal = FALSE)
if(test$p.value>=alph){
print("a==b")
}else{
print("a!=b")
}
}
norm+geom_vline(xintercept = test$statistic,linetype="dashed")
a <- rnorm(100,7,30)
b <- rnorm(100,5,5)
v_test <- var.test(a,b)
if(v_test$p.value<=alph){
test <- t.test(a,b,alternative = "two.sided",var.equal = FALSE)
if(test$p.value>=alph){
print("a==b")
}else{
print("a!=b")
}
}
norm+geom_vline(xintercept = test$statistic,linetype="dashed")
a <- rnorm(100,7,30)
b <- rnorm(100,5,5)
v_test <- var.test(a,b)
if(v_test$p.value<=alph){
test <- t.test(a,b,alternative = "two.sided",var.equal = FALSE)
if(test$p.value>=alph){
print("a==b")
}else{
print("a!=b")
}
}
norm+geom_vline(xintercept = test$statistic,linetype="dashed")
a <- rnorm(100,7,30)
b <- rnorm(100,5,5)
v_test <- var.test(a,b)
if(v_test$p.value<=alph){
test <- t.test(a,b,alternative = "two.sided",var.equal = FALSE)
if(test$p.value>=alph){
print("a==b")
}else{
print("a!=b")
}
}
norm+geom_vline(xintercept = test$statistic,linetype="dashed")
a <- rnorm(100,7,30)
b <- rnorm(100,5,5)
v_test <- var.test(a,b)
if(v_test$p.value<=alph){
test <- t.test(a,b,alternative = "two.sided",var.equal = FALSE)
if(test$p.value>=alph){
print("a==b")
}else{
print("a!=b")
}
}
norm+geom_vline(xintercept = test$statistic,linetype="dashed")
a <- rnorm(100,7,30)
b <- rnorm(100,5,5)
v_test <- var.test(a,b)
if(v_test$p.value<=alph){
test <- t.test(a,b,alternative = "two.sided",var.equal = FALSE)
if(test$p.value>=alph){
print("a==b")
}else{
print("a!=b")
}
}
norm+geom_vline(xintercept = test$statistic,linetype="dashed")
a <- rnorm(100,7,30)
b <- rnorm(100,5,5)
v_test <- var.test(a,b)
if(v_test$p.value<=alph){
test <- t.test(a,b,alternative = "two.sided",var.equal = FALSE)
if(test$p.value>=alph){
print("a==b")
}else{
print("a!=b")
}
}
norm+geom_vline(xintercept = test$statistic,linetype="dashed")
a <- rnorm(100,7,30)
b <- rnorm(100,5,5)
v_test <- var.test(a,b)
if(v_test$p.value<=alph){
test <- t.test(a,b,alternative = "two.sided",var.equal = FALSE)
if(test$p.value>=alph){
print("a==b")
}else{
print("a!=b")
}
}
norm+geom_vline(xintercept = test$statistic,linetype="dashed")
a <- rnorm(100,7,30)
b <- rnorm(100,5,5)
v_test <- var.test(a,b)
if(v_test$p.value<=alph){
test <- t.test(a,b,alternative = "two.sided",var.equal = FALSE)
if(test$p.value>=alph){
print("a==b")
}else{
print("a!=b")
}
}
norm+geom_vline(xintercept = test$statistic,linetype="dashed")
a <- rnorm(100,7,30)
b <- rnorm(100,5,5)
v_test <- var.test(a,b)
if(v_test$p.value<=alph){
test <- t.test(a,b,alternative = "two.sided",var.equal = FALSE)
if(test$p.value>=alph){
print("a==b")
}else{
print("a!=b")
}
}
norm+geom_vline(xintercept = test$statistic,linetype="dashed")
library(caret)
library(mlbench)
library(dplyr)
data("BostonHousing")
df <- BostonHousing
n <- nrow(df)
row_id <- sample(1:n,size = 0.9*n)
s_train <- df[row_id,]
s_test <- df[-row_id,]
knn_model <- train(medv~.,
data=s_train,
method="knn",
trControl=trainControl(
method = "cv",
number = 5
))
pred <- predict(knn_model,
newdata = s_test)
error <- (s_test$medv-pred)**2
rmse <- sqrt(mean(error))
library(caret)
library(mlbench)
library(dplyr)
data("BostonHousing")
df <- BostonHousing
n <- nrow(df)
row_id <- sample(1:n,size = 0.9*n)
s_train <- df[row_id,]
s_test <- df[-row_id,]
knn_model <- train(medv~.,
data=s_train,
method="knn",
trControl=trainControl(
method = "cv",
number = 5
))
pred <- predict(knn_model,
newdata = s_test)
error <- (s_test$medv-pred)**2
rmse <- sqrt(mean(error))
rmse
knn_model <- train(medv~.,
data=s_train,
method="ranger",
trControl=trainControl(
method = "cv",
number = 5
))
knn_model <- train(medv~.,
data=s_train,
method="ranger",
trControl=trainControl(
method = "cv",
number = 5
))
pred <- predict(knn_model,
newdata = s_test)
error <- (s_test$medv-pred)**2
rmse <- sqrt(mean(error))
knn_model <- train(medv~.,
data=s_train,
method="ranger",
trControl=trainControl(
method = "cv",
number = 5
))
pred <- predict(knn_model,
newdata = s_test)
error <- (s_test$medv-pred)**2
rmse <- sqrt(mean(error))
rmse
knn_model$results$RMSE
knn_model
knn_model <- train(medv~.,
data=s_train,
method="lm",
trControl=trainControl(
method = "cv",
number = 5
))
knn_model
summary(knn_model)
library(caret)
library(mlbench)
library(dplyr)
data("BostonHousing")
df <- BostonHousing
n <- nrow(df)
row_id <- sample(1:n,size = 0.9*n)
s_train <- df[row_id,]
s_test <- df[-row_id,]
knn_model <- train(medv~.,
data=s_train,
method="lm",
trControl=trainControl(
method = "cv",
number = 5
))
pred <- predict(knn_model,
newdata = s_test)
error <- (s_test$medv-pred)**2
rmse <- sqrt(mean(error))
rmse
knn_model
diamonds |>
ggplot(aes(price,shape))
diamonds |>
ggplot(aes(price,carat))
diamonds |>
ggplot(aes(carat,price))
diamonds |>
ggplot(aes(carat,price))+
geom_col()+
theme_bw()
diamonds |>
ggplot(aes(carat,price))+
geom_point()
diamonds |>
ggplot(aes(carat,price))+
geom_line()
diamonds |>
ggplot(aes(carat,price))+
geom_density()
diamonds |>
ggplot(aes(carat,price))
diamonds |>
ggplot(aes(carat,price))+
geom_smooth()
diamonds |>
ggplot(aes(carat,price))+
geom_smooth(method = lm)
library(tidyr)
world_bank_pop %>%
glimpse
world_bank_pop %>%
pivot_longer(cols=`2000`:`2017`)
world_bank_pop %>%
pivot_longer(cols=`2000`:`2017`,"year","pop")
world_bank_pop %>%
pivot_longer(cols=`2000`:`2017`,names_to = "year",values_to = "pop")
world_bank_pop %>%
pivot_longer(cols=`2000`:`2017`,names_to = "year",values_to = "pop")%>%
group_by(year)|>
summarise(mean(pop))
world_bank_pop %>%
pivot_longer(cols=`2000`:`2017`,names_to = "year",values_to = "pop")%>%
group_by(year)|>
summarise(mean(pop,na.rm=T))
world_bank_pop %>%
pivot_longer(cols=`2000`:`2017`,names_to = "year",values_to = "pop")%>%
group_by(year)|>
summarise(average = mean(pop,na.rm=T))
world_bank_pop %>%
pivot_longer(cols=`2000`:`2017`,names_to = "year",values_to = "pop")%>%
group_by(country)|>
summarise(average = mean(pop,na.rm=T))
world_bank_pop %>%
pivot_longer(cols=`2000`:`2017`,names_to = "year",values_to = "pop")%>%
group_by(indicator)|>
summarise(average = mean(pop,na.rm=T))
world_bank_pop %>%
pivot_longer(cols=`2000`:`2017`,names_to = "year",values_to = "pop")%>%
group_by(year)|>
summarise(average = mean(pop,na.rm=T))
glimpse(world_bank_pop)
unique(world_bank_pop$indicator)
factor(world_bank_pop$indicator)
unique(world_bank_pop$indicator)
pivot_longer(cols=`2000`:`2017`,names_to = "year",values_to = "pop")%>%
group_by(year)%>%
summarise(average = mean(pop,na.rm=T))
world_bank_pop %>%
filter(indicator=="SP.POP.TOTL")|>
pivot_longer(cols=`2000`:`2017`,names_to = "year",values_to = "pop")%>%
group_by(year)%>%
summarise(average = mean(pop,na.rm=T))
world_bank_pop %>%
filter(indicator=="SP.POP.TOTL") %>%
pivot_longer(cols=`2000`:`2017`,names_to = "year",values_to = "pop")%>%
group_by(year)%>%
summarise(average = mean(pop,na.rm=T))
world_bank_pop %>%
filter(indicator=="SP.POP.TOTL") %>%
pivot_longer(cols=`2000`:`2017`,names_to = "year",values_to = "pop")%>%
group_by(year,country)%>%
summarise(average = mean(pop,na.rm=T))
unique(world_bank_pop$country)
length(unique(world_bank_pop$country))
226*17
library(tidyverse)
library(mlbench)
data("BostonHousing")
df <- BostonHousing
n <- nrow(df)
id <- sample(1:n,size = 0.8*n)
colnames(df)
# train model
ml <- train(medv~.
data=tr,
#split
tr <- df[id,]
te <- df[-id,]
# train model
ml <- train(medv~.
data=tr,
# train model
ml <- train(medv~.,
data=tr,
method="lm",
trControl=trainControl(
method = "cv",
number = 5
))
ml
# train model
ml <- train(medv~.,
data=tr,
method="knn",
trControl=trainControl(
method = "cv",
number = 5
))
ml
ml$resample
summary(ml)
summarise(ml)
glimpse(mtcars)
df <- mtcars
library(caret)
n <- rnow(df)
n <- nrow(df)
id <- sample(1:n,size = 0.7*n)
train_df <- df[id,]
test_dff <- df[-id,]
View(df)
View(test_dff)
test_df <- df[-id,]
df
df <- tribble(df)
?tribble
library(dplyr)
tribble(df)
tribble(mtcars)
df
model <- train(mpg~disp+hp,
data=train_df,
method="lm")
model
model <- train(mpg~disp+hp,
data=train_df,
method="lm",
trControl=trainControl(
method="cv",
number = 5
))
model
predict(model,
newdata=test_df)
test_df$mpg
pred <- predict(model,
newdata=test_df)
#evaluation
error <- pred-test_df$mpg
error
model$resample
model
rmse_model <- sqrt(mean(error**2))
rmse_model
cat(rmse_model,"\n",model$results$RMSE)
test_df <- df[-id,]
set.seed(56)
model <- train(mpg~.,
data=train_df,
method="lm",
trControl=trainControl(
method="cv",
number = 5
))
pred <- predict(model,
newdata=test_df)
#evaluation
error <- pred-test_df$mpg
model$resample
rmse_model <- sqrt(mean(error**2))
cat(rmse_model,"\n",model$results$RMSE)
source("~/.active-rstudio-document", echo=TRUE)
cat(rmse_model,"\n",model$results$RMSE[1])
pwd()
dir
dir()
cls
getwd()
setwd("./Dataset/")
library(tidyverse)
df <- read.csv("StarTrekFatalities.csv")
glimpse(df)
df |>
print()
df |>
ggplot(Color,Frequency)+
geom_col()
df |>
ggplot(Color,Frequency)
df |>
ggplot(aes(Color,Frequency))
df |>
ggplot(aes(Color,Frequency))+
geom_col()
df |>
ggplot(aes(Color,Frequency))+
geom_col(aes(fill=Status))
df |>
ggplot(aes(Color,Frequency))+
geom_col(aes(fill=Status),width = 1)
df |>
ggplot(aes(Color,Frequency))+
geom_col(aes(fill=Status),width = 0.05)
df |>
ggplot(aes(Color,Frequency))+
geom_col(aes(fill=Status),width = 0.5)
